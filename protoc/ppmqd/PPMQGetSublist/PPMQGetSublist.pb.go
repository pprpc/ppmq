// Code generated by protoc-gen-go. DO NOT EDIT.
// source: PPMQGetSublist.proto

package PPMQGetSublist

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TopicInfo struct {
	// 主题过滤器(可以使用正则表达式)
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic"`
	// 订阅质量等级
	Qos uint32 `protobuf:"varint,2,opt,name=qos,proto3" json:"qos"`
	// cluster = 1: 属于集群消费，表示同一个cluster_subid订阅的topic将按照顺序的方式将消息发送到订阅者（分开消费）.
	// cluster = 2: 属于广播消费，表示相同的cluster_subid订阅的topic将每个消息都消费到.
	// 如果没有设置，则满足订阅条件的消息都各自消费.
	Cluster              uint32   `protobuf:"varint,3,opt,name=cluster,proto3" json:"cluster"`
	ClusterSubid         string   `protobuf:"bytes,4,opt,name=cluster_subid,json=clusterSubid,proto3" json:"cluster_subid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicInfo) Reset()         { *m = TopicInfo{} }
func (m *TopicInfo) String() string { return proto.CompactTextString(m) }
func (*TopicInfo) ProtoMessage()    {}
func (*TopicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4c1657fff45b9c1, []int{0}
}

func (m *TopicInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicInfo.Unmarshal(m, b)
}
func (m *TopicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicInfo.Marshal(b, m, deterministic)
}
func (m *TopicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicInfo.Merge(m, src)
}
func (m *TopicInfo) XXX_Size() int {
	return xxx_messageInfo_TopicInfo.Size(m)
}
func (m *TopicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TopicInfo proto.InternalMessageInfo

func (m *TopicInfo) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *TopicInfo) GetQos() uint32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *TopicInfo) GetCluster() uint32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *TopicInfo) GetClusterSubid() string {
	if m != nil {
		return m.ClusterSubid
	}
	return ""
}

// Reqest
type Req struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4c1657fff45b9c1, []int{1}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

// Response
type Resp struct {
	Total                int64        `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Topics               []*TopicInfo `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4c1657fff45b9c1, []int{2}
}

func (m *Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resp.Unmarshal(m, b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return xxx_messageInfo_Resp.Size(m)
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Resp) GetTopics() []*TopicInfo {
	if m != nil {
		return m.Topics
	}
	return nil
}

func init() {
	proto.RegisterType((*TopicInfo)(nil), "PPMQGetSublist.TopicInfo")
	proto.RegisterType((*Req)(nil), "PPMQGetSublist.Req")
	proto.RegisterType((*Resp)(nil), "PPMQGetSublist.Resp")
}

func init() { proto.RegisterFile("PPMQGetSublist.proto", fileDescriptor_b4c1657fff45b9c1) }

var fileDescriptor_b4c1657fff45b9c1 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4f, 0xc4, 0x20,
	0x14, 0x80, 0xad, 0x1c, 0x67, 0xee, 0xe9, 0x19, 0xf3, 0xec, 0x80, 0x4e, 0x17, 0x5c, 0x3a, 0x5d,
	0x62, 0x75, 0x75, 0x72, 0x30, 0x0e, 0x46, 0x7c, 0x75, 0x37, 0x6d, 0xc5, 0xa4, 0x09, 0x11, 0x5a,
	0xe8, 0xff, 0x37, 0xd0, 0x6a, 0x62, 0x6f, 0x7b, 0xdf, 0x17, 0xe0, 0x03, 0x20, 0x57, 0xea, 0xe5,
	0xed, 0x49, 0x87, 0x6a, 0x6c, 0x4c, 0xe7, 0xc3, 0xde, 0x0d, 0x36, 0x58, 0x3c, 0xff, 0x6f, 0xe5,
	0x00, 0x9b, 0x77, 0xeb, 0xba, 0xf6, 0xf9, 0xfb, 0xcb, 0x62, 0x0e, 0x3c, 0x44, 0x10, 0xd9, 0x2e,
	0x2b, 0x36, 0x34, 0x01, 0x5e, 0x00, 0xeb, 0xad, 0x17, 0xc7, 0xbb, 0xac, 0xd8, 0x52, 0x1c, 0x51,
	0xc0, 0x49, 0x6b, 0x46, 0x1f, 0xf4, 0x20, 0x58, 0xb2, 0xbf, 0x88, 0x37, 0xb0, 0x9d, 0xc7, 0x0f,
	0x3f, 0x36, 0xdd, 0xa7, 0x58, 0xa5, 0x93, 0xce, 0x66, 0x59, 0x45, 0x27, 0x39, 0x30, 0xd2, 0xbd,
	0x7c, 0x85, 0x15, 0x69, 0xef, 0xa6, 0x6a, 0xa8, 0x4d, 0xaa, 0x32, 0x9a, 0x00, 0x6f, 0x61, 0x9d,
	0xf2, 0x31, 0xcc, 0x8a, 0xd3, 0xf2, 0x6a, 0xbf, 0x78, 0xcf, 0xdf, 0xb5, 0x69, 0x5e, 0x58, 0x3e,
	0x00, 0x57, 0x8a, 0x5c, 0x8b, 0xf7, 0xc0, 0xd5, 0x63, 0x6d, 0x0c, 0x5e, 0x2e, 0x37, 0x91, 0xee,
	0xaf, 0xf3, 0x43, 0xe9, 0x9d, 0x3c, 0x6a, 0xd6, 0xe9, 0x87, 0xee, 0x7e, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x3c, 0xf9, 0x2f, 0x0d, 0x39, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PPRpcClient is the client API for PPRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PPRpcClient interface {
	PCall(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type pPRpcClient struct {
	cc *grpc.ClientConn
}

func NewPPRpcClient(cc *grpc.ClientConn) PPRpcClient {
	return &pPRpcClient{cc}
}

func (c *pPRpcClient) PCall(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/PPMQGetSublist.PPRpc/PCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PPRpcServer is the server API for PPRpc service.
type PPRpcServer interface {
	PCall(context.Context, *Req) (*Resp, error)
}

func RegisterPPRpcServer(s *grpc.Server, srv PPRpcServer) {
	s.RegisterService(&_PPRpc_serviceDesc, srv)
}

func _PPRpc_PCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPRpcServer).PCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PPMQGetSublist.PPRpc/PCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPRpcServer).PCall(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _PPRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PPMQGetSublist.PPRpc",
	HandlerType: (*PPRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PCall",
			Handler:    _PPRpc_PCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PPMQGetSublist.proto",
}
