// Code generated by protoc-gen-go. DO NOT EDIT.
// source: PPMQPublish.proto

package PPMQPublish

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reqest
type Req struct {
	// msg_id (生产者必须设置这个值，在一段时间范围内是唯一的；服务端接收到信息后需要修改该值，保证平台唯一.)
	// 如果是broker向Sub发送消息时，这个值需要替换.
	MsgId string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id"`
	// 主题名
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic"`
	// 描述Body的编码格式: 0, 未知, 4, PB-BIN; 5, PB-JSON;
	Format int32 `protobuf:"varint,3,opt,name=format,proto3" json:"format"`
	// 描述Body的编码使用的命令ID： 0， 表示使用了非预定以命令，需要应用程序自己处理.
	Cmdid uint64 `protobuf:"varint,4,opt,name=cmdid,proto3" json:"cmdid"`
	// 描述Body的内容的命令类型: 0 请求：  1 应答
	CmdType int32 `protobuf:"varint,5,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type"`
	// 消息产生时间,单位(ms)
	Timems int64 `protobuf:"varint,6,opt,name=timems,proto3" json:"timems"`
	//
	MsgBody []byte `protobuf:"bytes,7,opt,name=msg_body,json=msgBody,proto3" json:"msg_body"`
	// 消息标志，占用1个字节 具体定义参见MQTT的Publish的固定报头的标志位.
	// DUP： 0，第一次发送报文; 1, 报文重发
	// RETAIN: 保留最新的最后一条消息，分发给未来的主题名匹配的订阅者
	// QOS： 0 最大发送一次；1 最少发送一次；2， 确保只接收一次.
	// bytes pub_flag = 1;
	Dup                  int32    `protobuf:"varint,11,opt,name=dup,proto3" json:"dup"`
	Retain               int32    `protobuf:"varint,12,opt,name=retain,proto3" json:"retain"`
	Qos                  int32    `protobuf:"varint,13,opt,name=qos,proto3" json:"qos"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf0aa88ee44f59d, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *Req) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Req) GetFormat() int32 {
	if m != nil {
		return m.Format
	}
	return 0
}

func (m *Req) GetCmdid() uint64 {
	if m != nil {
		return m.Cmdid
	}
	return 0
}

func (m *Req) GetCmdType() int32 {
	if m != nil {
		return m.CmdType
	}
	return 0
}

func (m *Req) GetTimems() int64 {
	if m != nil {
		return m.Timems
	}
	return 0
}

func (m *Req) GetMsgBody() []byte {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

func (m *Req) GetDup() int32 {
	if m != nil {
		return m.Dup
	}
	return 0
}

func (m *Req) GetRetain() int32 {
	if m != nil {
		return m.Retain
	}
	return 0
}

func (m *Req) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

// Response
type Resp struct {
	// 请求包中携带的msg_id的值.
	MsgId string `protobuf:"bytes,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id"`
	// 服务端返回的全局msg_id(如果时Broker返回则是系统分配；如果时Sub返回则该值未空即可.)
	GMsgid               string   `protobuf:"bytes,3,opt,name=g_msgid,json=gMsgid,proto3" json:"g_msgid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf0aa88ee44f59d, []int{1}
}

func (m *Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resp.Unmarshal(m, b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return xxx_messageInfo_Resp.Size(m)
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *Resp) GetGMsgid() string {
	if m != nil {
		return m.GMsgid
	}
	return ""
}

func init() {
	proto.RegisterType((*Req)(nil), "PPMQPublish.Req")
	proto.RegisterType((*Resp)(nil), "PPMQPublish.Resp")
}

func init() { proto.RegisterFile("PPMQPublish.proto", fileDescriptor_fcf0aa88ee44f59d) }

var fileDescriptor_fcf0aa88ee44f59d = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x18, 0xc4, 0x71, 0x53, 0x27, 0xf4, 0x6b, 0x91, 0x5a, 0x8b, 0x3f, 0x86, 0x29, 0xea, 0x94, 0xa9,
	0x03, 0x48, 0xb0, 0xc3, 0xc4, 0x50, 0xc9, 0x58, 0xec, 0x51, 0x12, 0x1b, 0x63, 0x29, 0xc6, 0x4e,
	0xec, 0x0e, 0x79, 0x65, 0x9e, 0x02, 0x39, 0xe9, 0x10, 0xb1, 0xf9, 0x77, 0x3a, 0x9f, 0xbe, 0x3b,
	0xd8, 0x31, 0x76, 0xfc, 0x60, 0xa7, 0xba, 0xd5, 0xfe, 0xfb, 0xe0, 0x7a, 0x1b, 0x2c, 0x59, 0xcf,
	0xa4, 0xfd, 0x2f, 0x82, 0x84, 0xcb, 0x8e, 0xdc, 0x40, 0x6a, 0xbc, 0x2a, 0xb5, 0xa0, 0x28, 0x47,
	0xc5, 0x8a, 0x63, 0xe3, 0xd5, 0xbb, 0x20, 0xd7, 0x80, 0x83, 0x75, 0xba, 0xa1, 0x8b, 0x49, 0x1d,
	0x81, 0xdc, 0x42, 0xfa, 0x65, 0x7b, 0x53, 0x05, 0x9a, 0xe4, 0xa8, 0xc0, 0xfc, 0x4c, 0xd1, 0xdd,
	0x18, 0xa1, 0x05, 0x5d, 0xe6, 0xa8, 0x58, 0xf2, 0x09, 0xc8, 0x3d, 0x5c, 0x36, 0x46, 0x94, 0x61,
	0x70, 0x92, 0xe2, 0xd1, 0x9f, 0x35, 0x46, 0x7c, 0x0e, 0x4e, 0xc6, 0xa0, 0xa0, 0x8d, 0x34, 0x9e,
	0xa6, 0x39, 0x2a, 0x12, 0x7e, 0xa6, 0xf8, 0x25, 0x5e, 0x53, 0x5b, 0x31, 0xd0, 0x2c, 0x47, 0xc5,
	0x86, 0x67, 0xc6, 0xab, 0x57, 0x2b, 0x06, 0xb2, 0x85, 0x44, 0x9c, 0x1c, 0x5d, 0x8f, 0x41, 0xf1,
	0x19, 0x43, 0x7a, 0x19, 0x2a, 0xfd, 0x43, 0x37, 0xd3, 0x35, 0x13, 0x45, 0x67, 0x67, 0x3d, 0xbd,
	0x9a, 0x9c, 0x9d, 0xf5, 0xfb, 0x67, 0x58, 0x72, 0xe9, 0xdd, 0xac, 0xec, 0x62, 0x5e, 0xf6, 0x0e,
	0x32, 0x55, 0x1a, 0xaf, 0xb4, 0x18, 0x7b, 0xad, 0x78, 0xaa, 0x8e, 0x91, 0x1e, 0x5f, 0x00, 0x33,
	0xc6, 0x5d, 0x43, 0x0e, 0x80, 0xd9, 0x5b, 0xd5, 0xb6, 0x64, 0x7b, 0x98, 0xef, 0xca, 0x65, 0xf7,
	0xb0, 0xfb, 0xa7, 0x78, 0xb7, 0xbf, 0xa8, 0xd3, 0x71, 0xf1, 0xa7, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x29, 0x50, 0x10, 0x4f, 0x86, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PPRpcClient is the client API for PPRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PPRpcClient interface {
	PCall(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type pPRpcClient struct {
	cc *grpc.ClientConn
}

func NewPPRpcClient(cc *grpc.ClientConn) PPRpcClient {
	return &pPRpcClient{cc}
}

func (c *pPRpcClient) PCall(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/PPMQPublish.PPRpc/PCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PPRpcServer is the server API for PPRpc service.
type PPRpcServer interface {
	PCall(context.Context, *Req) (*Resp, error)
}

func RegisterPPRpcServer(s *grpc.Server, srv PPRpcServer) {
	s.RegisterService(&_PPRpc_serviceDesc, srv)
}

func _PPRpc_PCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPRpcServer).PCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PPMQPublish.PPRpc/PCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPRpcServer).PCall(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _PPRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PPMQPublish.PPRpc",
	HandlerType: (*PPRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PCall",
			Handler:    _PPRpc_PCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PPMQPublish.proto",
}
